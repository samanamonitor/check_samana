#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Copyright (c) 2013 SWITCH http://www.switch.ch
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

from __future__ import division
import argparse
import os
import subprocess
import sys
import json

__version__ = '1.7.0'

# default ceph values
CEPH_COMMAND = '/usr/bin/ceph'

# nagios exit code
STATUS_OK = 0
STATUS_WARNING = 1
STATUS_ERROR = 2
STATUS_UNKNOWN = 3

def stats_string(label, usage_percent, warn, critical):
    return "%s=%s%%;%s;%s;0;100" % (label, usage_percent, warn, critical)

def number_units(n):
    if n > 1649267441664:
        return "%.1fT" % float(n / 1099511627776)
    elif n > 1610612736:
        return "%.1fG" % float(n / 1073741824)
    elif n > 1572864:
        return "%.1M" % float(n / 1048576)
    return "%sB" % n

def main():

    # parse args
    parser = argparse.ArgumentParser(description="'ceph df' nagios plugin.")
    parser.add_argument('-e','--exe', help='ceph executable [%s]' % CEPH_COMMAND)
    parser.add_argument('-c','--conf', help='alternative ceph conf file')
    parser.add_argument('-m','--monaddress', help='ceph monitor address[:port]')
    parser.add_argument('-i','--id', help='ceph client id')
    parser.add_argument('-n','--name', help='ceph client name')
    parser.add_argument('-k','--keyring', help='ceph client keyring file')
    parser.add_argument('-p','--pool', help='ceph pool name')
    parser.add_argument('-d','--detail', help="show pool details on warn and critical", action='store_true')
    parser.add_argument('-W','--warn', help="warn above this percent RAW USED", type=float)
    parser.add_argument('-C','--critical', help="critical alert above this percent RAW USED", type=float)
    parser.add_argument('-V','--version', help='show version and exit', action='store_true')
    args = parser.parse_args()
    error = 'UNKNOWN error'

    # validate args
    ceph_exec = args.exe if args.exe else CEPH_COMMAND
    if not os.path.exists(ceph_exec):
        print "ERROR: ceph executable '%s' doesn't exist" % ceph_exec
        return STATUS_UNKNOWN

    if args.version:
        print 'version %s' % __version__
        return STATUS_OK

    if args.conf and not os.path.exists(args.conf):
        print "ERROR: ceph conf file '%s' doesn't exist" % args.conf
        return STATUS_UNKNOWN

    if args.keyring and not os.path.exists(args.keyring):
        print "ERROR: keyring file '%s' doesn't exist" % args.keyring
        return STATUS_UNKNOWN

    if args.warn > args.critical or not args.warn or not args.critical:
        print "ERROR: warn and critical level must be set and critical must be greater than warn"
        return STATUS_UNKNOWN

    # build command
    ceph_df = [ceph_exec]
    if args.monaddress:
        ceph_df.append('-m')
        ceph_df.append(args.monaddress)
    if args.conf:
        ceph_df.append('-c')
        ceph_df.append(args.conf)
    if args.id:
        ceph_df.append('--id')
        ceph_df.append(args.id)
    if args.name:
        ceph_df.append('--name')
        ceph_df.append(args.name)
    if args.keyring:
        ceph_df.append('--keyring')
        ceph_df.append(args.keyring)
    ceph_df.append('--format')
    ceph_df.append('json')
    ceph_df.append('df')

    #print ceph_df

    # exec command
    p = subprocess.Popen(ceph_df,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    output, err = p.communicate()

    # parse output
    # print "DEBUG: output:", output
    # print "DEBUG: err:", err
    if output:
        df_data = json.loads(output)

        if args.pool:
            for pool_data in df_data['pools']:
                if pool_data['name'] == args.pool:
                    pool_used = pool_data['stats']['bytes_used']
                    pool_usage_percent = int(pool_data['stats']['percent_used'] * 100)
                    pool_available_space = pool_data['stats']['max_avail']
                    pool_objects = pool_data['stats']['objects']
                    stats_str = stats_string("Usage", pool_usage_percent, args.warn, args.critical)
                    if pool_usage_percent > args.critical:
                        print 'CRITICAL: %s%% usage in Pool \'%s\' is above %s%% (%s used) | %s' % ( pool_usage_percent, args.pool, args.critical, number_units(pool_used), stats_str)
                        return STATUS_ERROR
                    if pool_usage_percent > args.warn:
                        print 'WARNING: %s%% usage in Pool \'%s\' is above %s%% (%s used) | %s' % (pool_usage_percent, args.pool, args.warn, number_units(pool_used), stats_str)
                        return STATUS_WARNING
                    else:
                        print '%s%% usage in Pool \'%s\' | %s' % (pool_usage_percent, args.pool, stats_str)
                        return STATUS_OK
            error = 'ERROR Pool not found'
        else:
            # print 'DEBUG:', globalvals
            # finally 4th element contains percentual value
            # print 'DEBUG USAGE:', globalvals[3]
            global_usage_percent = int(df_data['stats']['total_used_raw_ratio'] * 100)
            global_available_space = df_data['stats']['total_avail_bytes']
            global_total_space = df_data['stats']['total_bytes']
            # print 'DEBUG WARNLEVEL:', args.warn
            # print 'DEBUG CRITICALLEVEL:', args.critical
            poolout = ''
            if args.detail:
                for pool in df_data['pools']:
                    poolout += "%s\n" % stats_string(pool['name'], int(pool['stats']['percent_used'] * 100), args.warn, args.critical)
            if global_usage_percent > args.critical:
                print 'CRITICAL: global RAW usage of %s%% is above %s%% (%s of %s free) | Usage=%s%%;%s;%s;;' % (global_usage_percent, args.critical, number_units(global_available_space), number_units(global_total_space), global_usage_percent, args.warn, args.critical)
                print poolout
                return STATUS_ERROR
            elif global_usage_percent > args.warn:
                print 'WARNING: global RAW usage of %s%% is above %s%% (%s of %s free) | Usage=%s%%;%s;%s;;' % (global_usage_percent, args.warn, number_units(global_available_space), number_units(global_total_space), global_usage_percent, args.warn, args.critical)
                print poolout
                return STATUS_WARNING
            else:
                print 'RAW usage %s%% | Usage=%s%%;%s;%s;;' % (global_usage_percent, global_usage_percent, args.warn, args.critical)
                print poolout
                return STATUS_OK

        #for
    elif err:
        # read only first line of error
        one_line = err.split('\n')[0]
        if '-1 ' in one_line:
            idx = one_line.rfind('-1 ')
            error = 'ERROR: %s: %s' % (ceph_exec, one_line[idx+len('-1 '):])
        else:
            error = one_line

    print error
    return STATUS_UNKNOWN


if __name__ == "__main__":
    sys.exit(main())
